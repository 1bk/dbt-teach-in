{"results": [{"node": {"raw_sql": "", "compiled": true, "database": "postgres", "schema": "dbt_seeds", "fqn": ["dbt_teach_in", "raw_item_types"], "unique_id": "seed.dbt_teach_in.raw_item_types", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "raw_item_types.csv", "original_file_path": "data/raw_item_types.csv", "name": "raw_item_types", "resource_type": "seed", "alias": "raw_item_types", "checksum": {"name": "sha256", "checksum": "b0a50c5714eaa219974b02de52ae61566e450e0f97ec54a55b7fdd1a5c6962b0"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "seeds", "database": null, "tags": [], "full_refresh": null, "quote_columns": true}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.04662799835205078, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.863101Z", "completed_at": "2020-10-31T15:55:30.899935Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:30.905499Z", "completed_at": "2020-10-31T15:55:30.905525Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "postgres", "schema": "dbt_seeds", "fqn": ["dbt_teach_in", "raw_orders"], "unique_id": "seed.dbt_teach_in.raw_orders", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "raw_orders.csv", "original_file_path": "data/raw_orders.csv", "name": "raw_orders", "resource_type": "seed", "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "ff14603b5a6b6bdc3f4a0b988d471de6c18150f4e2d1505428f1ebed180138b4"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"order_priority": "varchar(1)"}, "alias": null, "schema": "seeds", "database": null, "tags": [], "full_refresh": null, "quote_columns": true}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "The order table of all products across all countries\n", "columns": {"id": {"name": "id", "description": "n/a", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.1887061595916748, "thread_id": "Thread-7", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.906546Z", "completed_at": "2020-10-31T15:55:30.949075Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.080984Z", "completed_at": "2020-10-31T15:55:31.081007Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "postgres", "schema": "dbt_seeds", "fqn": ["dbt_teach_in", "raw_countries"], "unique_id": "seed.dbt_teach_in.raw_countries", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "raw_countries.csv", "original_file_path": "data/raw_countries.csv", "name": "raw_countries", "resource_type": "seed", "alias": "raw_countries", "checksum": {"name": "sha256", "checksum": "b4b7a2c3334d0683f1f641d9a56376b0eb562b32d479e409d2df51866c685b74"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "seeds", "database": null, "tags": [], "full_refresh": null, "quote_columns": true}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.19186091423034668, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.906950Z", "completed_at": "2020-10-31T15:55:30.955435Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.082666Z", "completed_at": "2020-10-31T15:55:31.082687Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "", "compiled": true, "database": "postgres", "schema": "dbt_seeds", "fqn": ["dbt_teach_in", "raw_regions"], "unique_id": "seed.dbt_teach_in.raw_regions", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "raw_regions.csv", "original_file_path": "data/raw_regions.csv", "name": "raw_regions", "resource_type": "seed", "alias": "raw_regions", "checksum": {"name": "sha256", "checksum": "de1338b97001d606adbc9d4e2285ce7369202553d7c339a21dbbc83ced58defd"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "seeds", "database": null, "tags": [], "full_refresh": null, "quote_columns": true}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": ""}, "error": null, "status": null, "execution_time": 0.19217300415039062, "thread_id": "Thread-6", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.907165Z", "completed_at": "2020-10-31T15:55:30.978286Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.083548Z", "completed_at": "2020-10-31T15:55:31.083565Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{#--\n\n    Apparently there was an error in the \"units_sold\" where\n    the number was doubled in the month of June 2017.\n\n    Use this query with the snapshot table to be able to\n    put yourself at the point in time before or after the fix\n    was executed (i.e. the fix was on '2017-07-01')\n\n-#}\n\n-- Tracing back to the state before the Error was fixed.\nwith base as (\n    select row_number() over (partition by id order by dbt_valid_from desc) as rn,\n           *\n    from dbt_snapshots.orders_snapshot_backup\n\n    -- [Comment/uncomment either one]\n\n    -- Before the fix, will be high\n    where dbt_valid_from < '2017-07-01'\n\n    -- After the fix, should be lower\n    -- where dbt_valid_from <= '2017-07-01'\n\n    order by id asc\n)\nselect item_type_id,\n       sum(units_sold)\nfrom base\nwhere true\n  and rn = 1\n  and ship_date < '2017-07-01'\ngroup by 1\norder by 1\n;", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "analysis", "tracing_units_sold_error"], "unique_id": "analysis.dbt_teach_in.tracing_units_sold_error", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "analysis/tracing_units_sold_error.sql", "original_file_path": "analysis/tracing_units_sold_error.sql", "name": "tracing_units_sold_error", "resource_type": "analysis", "alias": "tracing_units_sold_error", "checksum": {"name": "sha256", "checksum": "6acd00978b3013741dfcf738d41acd45698776fd67ce7ccc9176da2e4b3e190e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "# Example Snapshots Use Case\n---\nUsing Snapshot table to see the before vs after as fix \n\n![UsingSnapshots](assets/using_snapshots.png)\n\n## SQL Query used\n> _Note: did not bother optimising :P_\n\n```postgresql\n-- Tracing back to the state before the Error was fixed.\nwith base_before as (\n    \n    select row_number() over (partition by id order by dbt_valid_from desc) as rn,\n           *\n    from dbt_snapshots.orders_snapshot_backup\n    \n    -- Before the fix, will be high\n    where dbt_valid_from < '2017-07-01'\n\n    order by id asc\n\n)\n\n, \"bbefore\" as (\n\n    select item_type_id,\n           sum(units_sold)\n    from base_before\n    where true\n      and rn = 1\n      and ship_date < '2017-07-01'\n    group by 1\n    order by 1\n\n)\n\n, base_after as (\n    select row_number() over (partition by id order by dbt_valid_from desc) as rn,\n           *\n    from dbt_snapshots.orders_snapshot_backup\n\n    -- After the fix, should be lower\n    where dbt_valid_from <= '2017-07-01'\n\n    order by id asc\n)\n\n, \"aafter\" as (\n    \n    select item_type_id,\n           sum(units_sold)\n    from base_after\n    where true\n      and rn = 1\n      and ship_date < '2017-07-01'\n    group by 1\n    order by 1\n    \n)\n\nselect\n    b.item_type_id,\n    b.sum as sum_before,\n    a.sum as sum_after\nfrom \n    \"bbefore\" as b\nleft join\n    \"aafter\" as a \n    on b.item_type_id = a.item_type_id\n;\n\n```", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "analysis/analysis.yml", "build_path": "target/compiled/dbt_teach_in/analysis/tracing_units_sold_error.sql", "deferred": false, "compiled_sql": "-- Tracing back to the state before the Error was fixed.\nwith base as (\n    select row_number() over (partition by id order by dbt_valid_from desc) as rn,\n           *\n    from dbt_snapshots.orders_snapshot_backup\n\n    -- [Comment/uncomment either one]\n\n    -- Before the fix, will be high\n    where dbt_valid_from < '2017-07-01'\n\n    -- After the fix, should be lower\n    -- where dbt_valid_from <= '2017-07-01'\n\n    order by id asc\n)\nselect item_type_id,\n       sum(units_sold)\nfrom base\nwhere true\n  and rn = 1\n  and ship_date < '2017-07-01'\ngroup by 1\norder by 1\n;", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Tracing back to the state before the Error was fixed.\nwith base as (\n    select row_number() over (partition by id order by dbt_valid_from desc) as rn,\n           *\n    from dbt_snapshots.orders_snapshot_backup\n\n    -- [Comment/uncomment either one]\n\n    -- Before the fix, will be high\n    where dbt_valid_from < '2017-07-01'\n\n    -- After the fix, should be lower\n    -- where dbt_valid_from <= '2017-07-01'\n\n    order by id asc\n)\nselect item_type_id,\n       sum(units_sold)\nfrom base\nwhere true\n  and rn = 1\n  and ship_date < '2017-07-01'\ngroup by 1\norder by 1\n;"}, "error": null, "status": null, "execution_time": 0.1943659782409668, "thread_id": "Thread-5", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.907423Z", "completed_at": "2020-10-31T15:55:31.086768Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.091267Z", "completed_at": "2020-10-31T15:55:31.091283Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('mock_schema', 'seeds_orders') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "source_not_null_mock_schema_seeds_orders_id"], "unique_id": "test.dbt_teach_in.source_not_null_mock_schema_seeds_orders_id", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/source_not_null_mock_schema_seeds_orders_id.sql", "original_file_path": "../_source/dbt_seeds/dbt_seeds.yml", "name": "source_not_null_mock_schema_seeds_orders_id", "resource_type": "test", "alias": "source_not_null_mock_schema_seeds_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [], "sources": [["mock_schema", "seeds_orders"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_teach_in.mock_schema.seeds_orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/../_source/dbt_seeds/dbt_seeds.yml/schema_test/source_not_null_mock_schema_seeds_orders_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom postgres.dbt_seeds.orders\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom postgres.dbt_seeds.orders\nwhere id is null\n\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.22125697135925293, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.907684Z", "completed_at": "2020-10-31T15:55:31.088138Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.092444Z", "completed_at": "2020-10-31T15:55:31.092457Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('mock_schema', 'seeds_orders') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "source_unique_mock_schema_seeds_orders_id"], "unique_id": "test.dbt_teach_in.source_unique_mock_schema_seeds_orders_id", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/source_unique_mock_schema_seeds_orders_id.sql", "original_file_path": "../_source/dbt_seeds/dbt_seeds.yml", "name": "source_unique_mock_schema_seeds_orders_id", "resource_type": "test", "alias": "source_unique_mock_schema_seeds_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [], "sources": [["mock_schema", "seeds_orders"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_teach_in.mock_schema.seeds_orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/../_source/dbt_seeds/dbt_seeds.yml/schema_test/source_unique_mock_schema_seeds_orders_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from postgres.dbt_seeds.orders\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from postgres.dbt_seeds.orders\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.2356858253479004, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:30.907961Z", "completed_at": "2020-10-31T15:55:31.089834Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.095464Z", "completed_at": "2020-10-31T15:55:31.095497Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n    config(\n        materialized='view',\n    )\n}}\n\n\nwith item_types as (\n\n    select * from {{ ref('raw_item_types') }}\n\n)\n\n, col_renamed as (\n\n    select\n        id as item_type_id\n      , item_type\n      , unit_price\n      , unit_cost\n      , created_at\n      , updated_at\n    from\n        item_types\n\n)\n\nselect * from col_renamed", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "reporting", "staging", "base", "base_item_types"], "unique_id": "model.dbt_teach_in.base_item_types", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "reporting/staging/base/base_item_types.sql", "original_file_path": "models/reporting/staging/base/base_item_types.sql", "name": "base_item_types", "resource_type": "model", "alias": "base_item_types", "checksum": {"name": "sha256", "checksum": "878ca7a0f906b157bf9f0775392ff08d38c9c9e09926a14a9b991c4f2797e25a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["reporting", "staging", "base", "cte", "ephemeral"], "full_refresh": null, "bind": false}, "tags": ["reporting", "staging", "base", "cte", "ephemeral"], "refs": [["raw_item_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.dbt_teach_in.raw_item_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/base/base_item_types.sql", "deferred": false, "compiled_sql": "\n\n\nwith item_types as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_item_types\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as item_type_id\n      , item_type\n      , unit_price\n      , unit_cost\n      , created_at\n      , updated_at\n    from\n        item_types\n\n)\n\nselect * from col_renamed", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nwith item_types as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_item_types\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as item_type_id\n      , item_type\n      , unit_price\n      , unit_cost\n      , created_at\n      , updated_at\n    from\n        item_types\n\n)\n\nselect * from col_renamed"}, "error": null, "status": null, "execution_time": 0.18745708465576172, "thread_id": "Thread-8", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.091807Z", "completed_at": "2020-10-31T15:55:31.145497Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.146977Z", "completed_at": "2020-10-31T15:55:31.146989Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "\n\n{{\n    config(\n      target_database='postgres',\n      target_schema='dbt_snapshots',\n      unique_key='id',\n\n      strategy='timestamp',\n      updated_at='updated_at',\n    )\n}}\n\nselect * from {{ ref('raw_orders') }}\n{#--\n\n    -- Alternative referencing via source:\n    -- select * from {{ source('dbt_seeds', 'raw_orders') }}\n\n-#}\n\n", "compiled": true, "database": "postgres", "schema": "dbt_snapshots", "fqn": ["dbt_teach_in", "raw_orders_snapshot", "raw_orders_snapshot"], "unique_id": "snapshot.dbt_teach_in.raw_orders_snapshot", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "raw_orders_snapshot.sql", "original_file_path": "snapshots/raw_orders_snapshot.sql", "name": "raw_orders_snapshot", "resource_type": "snapshot", "alias": "raw_orders_snapshot", "checksum": {"name": "sha256", "checksum": "f01fbef9e0496498d1e7a4f1056acbccacf4b60b260b284da6411de3a7de326b"}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "id", "target_schema": "dbt_snapshots", "target_database": "postgres", "strategy": "timestamp", "updated_at": "updated_at"}, "tags": [], "refs": [["raw_orders"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.dbt_teach_in.raw_orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "\n\n\n\nselect * from \"postgres\".\"dbt_seeds\".\"raw_orders\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect * from \"postgres\".\"dbt_seeds\".\"raw_orders\""}, "error": null, "status": null, "execution_time": 0.1378002166748047, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.146146Z", "completed_at": "2020-10-31T15:55:31.243124Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.273807Z", "completed_at": "2020-10-31T15:55:31.273829Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ ref('raw_orders') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "unique_raw_orders_id"], "unique_id": "test.dbt_teach_in.unique_raw_orders_id", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/unique_raw_orders_id.sql", "original_file_path": "data/seeds.yml", "name": "unique_raw_orders_id", "resource_type": "test", "alias": "unique_raw_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["raw_orders"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_teach_in.raw_orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/data/seeds.yml/schema_test/unique_raw_orders_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        id\n\n    from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n    where id is not null\n    group by id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "id"}, "error": null, "status": null, "execution_time": 0.14269185066223145, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.146351Z", "completed_at": "2020-10-31T15:55:31.277992Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.281676Z", "completed_at": "2020-10-31T15:55:31.281693Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base_regions as (\n\n    select * from {{ ref('base_regions') }}\n\n)\n\n, base_countries as (\n\n    select * from {{ ref('base_countries') }}\n\n)\n\n, base_orders as (\n\n    select * from {{ ref('base_orders') }}\n\n)\n\n, base_item_types as (\n\n    select * from {{ ref('base_item_types') }}\n\n)\n\n, final as (\n\n    select \n        o.order_id\n      , o.order_ref_id\n      , o.order_priority\n      , o.order_date\n      , o.ship_date\n      , r.region\n      , c.country\n      , o.sales_channel\n      , it.item_type\n      , o.units_sold\n      , o.total_revenue\n      , o.total_cost\n      , o.total_profit\n      , o.created_at        as order_created_at\n      , o.updated_at        as order_updated_at\n      , current_timestamp   as dbt_created_at\n\n    from\n        base_orders as o\n    left join\n        base_countries as c\n        on o.country_id = c.country_id\n    left join\n        base_regions as r\n        on c.region_id = r.region_id\n    left join\n        base_item_types as it\n        on o.item_type_id = it.item_type_id\n\n)\n\nselect * from final", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "reporting", "core", "dim_orders__dashboard"], "unique_id": "model.dbt_teach_in.dim_orders__dashboard", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "reporting/core/dim_orders__dashboard.sql", "original_file_path": "models/reporting/core/dim_orders__dashboard.sql", "name": "dim_orders__dashboard", "resource_type": "model", "alias": "dim_orders__dashboard", "checksum": {"name": "sha256", "checksum": "3d0d524de37c1e20e89f5bf30c3dbfa56b3e7ec3d6024bde03dbfb5edeceeea6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["reporting", "core"], "full_refresh": null, "bind": false}, "tags": ["reporting", "core"], "refs": [["base_regions"], ["base_countries"], ["base_orders"], ["base_item_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.dbt_teach_in.base_regions", "model.dbt_teach_in.base_countries", "model.dbt_teach_in.base_orders", "model.dbt_teach_in.base_item_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/core/dim_orders__dashboard.sql", "deferred": false, "compiled_sql": "with base_regions as (\n\n    select * from __dbt__CTE__base_regions\n\n)\n\n, base_countries as (\n\n    select * from __dbt__CTE__base_countries\n\n)\n\n, base_orders as (\n\n    select * from __dbt__CTE__base_orders\n\n)\n\n, base_item_types as (\n\n    select * from \"postgres\".\"dbt\".\"base_item_types\"\n\n)\n\n, final as (\n\n    select \n        o.order_id\n      , o.order_ref_id\n      , o.order_priority\n      , o.order_date\n      , o.ship_date\n      , r.region\n      , c.country\n      , o.sales_channel\n      , it.item_type\n      , o.units_sold\n      , o.total_revenue\n      , o.total_cost\n      , o.total_profit\n      , o.created_at        as order_created_at\n      , o.updated_at        as order_updated_at\n      , current_timestamp   as dbt_created_at\n\n    from\n        base_orders as o\n    left join\n        base_countries as c\n        on o.country_id = c.country_id\n    left join\n        base_regions as r\n        on c.region_id = r.region_id\n    left join\n        base_item_types as it\n        on o.item_type_id = it.item_type_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_teach_in.base_regions", "sql": " __dbt__CTE__base_regions as (\n\n\n\nwith regions as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_regions\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as region_id\n      , region\n    from\n        regions\n\n)\n\nselect * from col_renamed\n)"}, {"id": "model.dbt_teach_in.base_countries", "sql": " __dbt__CTE__base_countries as (\n\n\n\nwith countries as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_countries\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as country_id\n      , country\n      , has_online_sale_channel\n      , has_offline_sale_channel\n      , region_id\n      , created_at\n      , updated_at\n    from\n        countries\n\n)\n\nselect * from col_renamed\n)"}, {"id": "model.dbt_teach_in.base_orders", "sql": " __dbt__CTE__base_orders as (\n\n\n\nwith orders as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as order_id\n      , order_ref_id\n      , order_priority\n      , order_date\n      , ship_date\n      , country_id\n      , sales_channel\n      , item_type_id\n      , units_sold\n      , total_revenue\n      , total_cost\n      , total_profit\n      , created_at\n      , updated_at\n    from\n        orders\n\n)\n\nselect * from col_renamed\n)"}], "injected_sql": "with  __dbt__CTE__base_regions as (\n\n\n\nwith regions as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_regions\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as region_id\n      , region\n    from\n        regions\n\n)\n\nselect * from col_renamed\n),  __dbt__CTE__base_countries as (\n\n\n\nwith countries as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_countries\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as country_id\n      , country\n      , has_online_sale_channel\n      , has_offline_sale_channel\n      , region_id\n      , created_at\n      , updated_at\n    from\n        countries\n\n)\n\nselect * from col_renamed\n),  __dbt__CTE__base_orders as (\n\n\n\nwith orders as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as order_id\n      , order_ref_id\n      , order_priority\n      , order_date\n      , ship_date\n      , country_id\n      , sales_channel\n      , item_type_id\n      , units_sold\n      , total_revenue\n      , total_cost\n      , total_profit\n      , created_at\n      , updated_at\n    from\n        orders\n\n)\n\nselect * from col_renamed\n),base_regions as (\n\n    select * from __dbt__CTE__base_regions\n\n)\n\n, base_countries as (\n\n    select * from __dbt__CTE__base_countries\n\n)\n\n, base_orders as (\n\n    select * from __dbt__CTE__base_orders\n\n)\n\n, base_item_types as (\n\n    select * from \"postgres\".\"dbt\".\"base_item_types\"\n\n)\n\n, final as (\n\n    select \n        o.order_id\n      , o.order_ref_id\n      , o.order_priority\n      , o.order_date\n      , o.ship_date\n      , r.region\n      , c.country\n      , o.sales_channel\n      , it.item_type\n      , o.units_sold\n      , o.total_revenue\n      , o.total_cost\n      , o.total_profit\n      , o.created_at        as order_created_at\n      , o.updated_at        as order_updated_at\n      , current_timestamp   as dbt_created_at\n\n    from\n        base_orders as o\n    left join\n        base_countries as c\n        on o.country_id = c.country_id\n    left join\n        base_regions as r\n        on c.region_id = r.region_id\n    left join\n        base_item_types as it\n        on o.item_type_id = it.item_type_id\n\n)\n\nselect * from final"}, "error": null, "status": null, "execution_time": 0.11981320381164551, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.289228Z", "completed_at": "2020-10-31T15:55:31.403785Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.405414Z", "completed_at": "2020-10-31T15:55:31.405432Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base_orders as (\n\n    select * from {{ ref('base_orders') }}\n\n)\n\n, base_item_types as (\n\n    select * from {{ ref('base_item_types') }}\n\n)\n\n, joined as (\n\n    select\n          order_id\n        , order_ref_id\n        , units_sold\n        , total_revenue\n        , total_cost\n        , total_profit\n        , '|' as \"|\"\n        , cast(units_sold * unit_price as numeric(32,2)) as calc_revenue\n        , cast(units_sold * unit_cost as numeric(32,2)) as calc_cost\n        , cast(units_sold * (unit_price - unit_cost) as numeric(32,2)) as calc_profit\n\n    from\n        base_orders as o\n        left join\n            base_item_types as i\n            on o.item_type_id = i.item_type_id\n\n)\n\n, verify as (\n\n    select\n          *\n        , '||' as \"||\"\n        , (total_revenue = calc_revenue) as same_reveue\n        , (total_cost = calc_cost) as same_cost\n        , (total_profit = calc_profit) as same_profit\n\n    from\n        joined\n)\n\nselect * from verify", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "reporting", "staging", "stg_orders__calc_check"], "unique_id": "model.dbt_teach_in.stg_orders__calc_check", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "reporting/staging/stg_orders__calc_check.sql", "original_file_path": "models/reporting/staging/stg_orders__calc_check.sql", "name": "stg_orders__calc_check", "resource_type": "model", "alias": "stg_orders__calc_check", "checksum": {"name": "sha256", "checksum": "759b7589df1558e618dd3b3bbd5ad026b3272bcfd2571ba9fe054d3b562fa481"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["reporting", "staging"], "full_refresh": null, "bind": false}, "tags": ["reporting", "staging"], "refs": [["base_orders"], ["base_item_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.dbt_teach_in.base_orders", "model.dbt_teach_in.base_item_types"]}, "description": "A simple view use to visualy check the reports v.s. calculated:\n  - Revenue\n  - Cost\n  - Profit\n\nSchema test is executed on the Boolean column and throws error if\nany calculation is off!\n", "columns": {"same_reveue": {"name": "same_reveue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "same_cost": {"name": "same_cost", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "same_profit": {"name": "same_profit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/reporting/staging/reporting_staging.yml", "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/stg_orders__calc_check.sql", "deferred": false, "compiled_sql": "with base_orders as (\n\n    select * from __dbt__CTE__base_orders\n\n)\n\n, base_item_types as (\n\n    select * from \"postgres\".\"dbt\".\"base_item_types\"\n\n)\n\n, joined as (\n\n    select\n          order_id\n        , order_ref_id\n        , units_sold\n        , total_revenue\n        , total_cost\n        , total_profit\n        , '|' as \"|\"\n        , cast(units_sold * unit_price as numeric(32,2)) as calc_revenue\n        , cast(units_sold * unit_cost as numeric(32,2)) as calc_cost\n        , cast(units_sold * (unit_price - unit_cost) as numeric(32,2)) as calc_profit\n\n    from\n        base_orders as o\n        left join\n            base_item_types as i\n            on o.item_type_id = i.item_type_id\n\n)\n\n, verify as (\n\n    select\n          *\n        , '||' as \"||\"\n        , (total_revenue = calc_revenue) as same_reveue\n        , (total_cost = calc_cost) as same_cost\n        , (total_profit = calc_profit) as same_profit\n\n    from\n        joined\n)\n\nselect * from verify", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_teach_in.base_orders", "sql": " __dbt__CTE__base_orders as (\n\n\n\nwith orders as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as order_id\n      , order_ref_id\n      , order_priority\n      , order_date\n      , ship_date\n      , country_id\n      , sales_channel\n      , item_type_id\n      , units_sold\n      , total_revenue\n      , total_cost\n      , total_profit\n      , created_at\n      , updated_at\n    from\n        orders\n\n)\n\nselect * from col_renamed\n)"}], "injected_sql": "with  __dbt__CTE__base_orders as (\n\n\n\nwith orders as (\n\n    select * from \"postgres\".\"dbt_seeds\".\"raw_orders\"\n\n)\n\n, col_renamed as (\n\n    select\n        id as order_id\n      , order_ref_id\n      , order_priority\n      , order_date\n      , ship_date\n      , country_id\n      , sales_channel\n      , item_type_id\n      , units_sold\n      , total_revenue\n      , total_cost\n      , total_profit\n      , created_at\n      , updated_at\n    from\n        orders\n\n)\n\nselect * from col_renamed\n),base_orders as (\n\n    select * from __dbt__CTE__base_orders\n\n)\n\n, base_item_types as (\n\n    select * from \"postgres\".\"dbt\".\"base_item_types\"\n\n)\n\n, joined as (\n\n    select\n          order_id\n        , order_ref_id\n        , units_sold\n        , total_revenue\n        , total_cost\n        , total_profit\n        , '|' as \"|\"\n        , cast(units_sold * unit_price as numeric(32,2)) as calc_revenue\n        , cast(units_sold * unit_cost as numeric(32,2)) as calc_cost\n        , cast(units_sold * (unit_price - unit_cost) as numeric(32,2)) as calc_profit\n\n    from\n        base_orders as o\n        left join\n            base_item_types as i\n            on o.item_type_id = i.item_type_id\n\n)\n\n, verify as (\n\n    select\n          *\n        , '||' as \"||\"\n        , (total_revenue = calc_revenue) as same_reveue\n        , (total_cost = calc_cost) as same_cost\n        , (total_profit = calc_profit) as same_profit\n\n    from\n        joined\n)\n\nselect * from verify"}, "error": null, "status": null, "execution_time": 0.11980795860290527, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.289632Z", "completed_at": "2020-10-31T15:55:31.404659Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.406100Z", "completed_at": "2020-10-31T15:55:31.406114Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": [true], "column_name": "same_reveue", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "accepted_values_stg_orders__calc_check_same_reveue__True"], "unique_id": "test.dbt_teach_in.accepted_values_stg_orders__calc_check_same_reveue__True", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/accepted_values_stg_orders__calc_check_same_reveue__True.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "accepted_values_stg_orders__calc_check_same_reveue__True", "resource_type": "test", "alias": "accepted_values_stg_orders__calc_check_same_reveue__True", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/accepted_values_stg_orders__calc_check_same_reveue__True.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_reveue as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_reveue as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "column_name": "same_reveue"}, "error": null, "status": null, "execution_time": 0.18734979629516602, "thread_id": "Thread-7", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.442289Z", "completed_at": "2020-10-31T15:55:31.590675Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.599314Z", "completed_at": "2020-10-31T15:55:31.599339Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": [true], "column_name": "same_cost", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "accepted_values_stg_orders__calc_check_same_cost__True"], "unique_id": "test.dbt_teach_in.accepted_values_stg_orders__calc_check_same_cost__True", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/accepted_values_stg_orders__calc_check_same_cost__True.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "accepted_values_stg_orders__calc_check_same_cost__True", "resource_type": "test", "alias": "accepted_values_stg_orders__calc_check_same_cost__True", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/accepted_values_stg_orders__calc_check_same_cost__True.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_cost as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_cost as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "column_name": "same_cost"}, "error": null, "status": null, "execution_time": 0.19067692756652832, "thread_id": "Thread-5", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.428261Z", "completed_at": "2020-10-31T15:55:31.589130Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.593670Z", "completed_at": "2020-10-31T15:55:31.593688Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": [true], "column_name": "same_profit", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "accepted_values_stg_orders__calc_check_same_profit__True"], "unique_id": "test.dbt_teach_in.accepted_values_stg_orders__calc_check_same_profit__True", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/accepted_values_stg_orders__calc_check_same_profit__True.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "accepted_values_stg_orders__calc_check_same_profit__True", "resource_type": "test", "alias": "accepted_values_stg_orders__calc_check_same_profit__True", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/accepted_values_stg_orders__calc_check_same_profit__True.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_profit as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        same_profit as value_field\n\n    from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'True'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "column_name": "same_profit"}, "error": null, "status": null, "execution_time": 0.19095301628112793, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.434033Z", "completed_at": "2020-10-31T15:55:31.589975Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.594506Z", "completed_at": "2020-10-31T15:55:31.594522Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "same_cost", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "not_null_stg_orders__calc_check_same_cost"], "unique_id": "test.dbt_teach_in.not_null_stg_orders__calc_check_same_cost", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/not_null_stg_orders__calc_check_same_cost.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "not_null_stg_orders__calc_check_same_cost", "resource_type": "test", "alias": "not_null_stg_orders__calc_check_same_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/not_null_stg_orders__calc_check_same_cost.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_cost is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_cost is null\n\n\n", "column_name": "same_cost"}, "error": null, "status": null, "execution_time": 0.19126081466674805, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.442674Z", "completed_at": "2020-10-31T15:55:31.591845Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.601045Z", "completed_at": "2020-10-31T15:55:31.601064Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with dim_orders__dashboard as (\n\n    select * from {{ ref('dim_orders__dashboard') }}\n\n)\n\n, renamed_summed as (\n\n    select\n        replace(replace(country, '''', ''), ' ', '_') as country\n      , sum(units_sold)                               as units_sold\n\n    from\n        dim_orders__dashboard\n\n    where\n         item_type = 'Fruits'\n\n    group by\n        country\n\n)\n\n, final as (\n\n    select\n         a.country                     as a_country\n       , b.country                     as b_country\n       , (b.units_sold - a.units_sold) as units_sold_diff\n       , current_timestamp   as dbt_created_at\n\n    from\n        renamed_summed     as a\n        cross join\n            renamed_summed as b\n\n)\n\nselect * from final", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "reporting", "core", "intermediate", "stg_orders__countries_units_sold__fruits"], "unique_id": "model.dbt_teach_in.stg_orders__countries_units_sold__fruits", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "reporting/core/intermediate/stg_orders__countries_units_sold__fruits.sql", "original_file_path": "models/reporting/core/intermediate/stg_orders__countries_units_sold__fruits.sql", "name": "stg_orders__countries_units_sold__fruits", "resource_type": "model", "alias": "stg_orders__countries_units_sold__fruits", "checksum": {"name": "sha256", "checksum": "cfc69bc672b3fffb3264fc06ca01051aac7034cfa6310b4b064e82391f22d064"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["reporting", "core", "intermediate"], "full_refresh": null, "bind": false}, "tags": ["reporting", "core", "intermediate"], "refs": [["dim_orders__dashboard"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.dbt_teach_in.dim_orders__dashboard"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/core/intermediate/stg_orders__countries_units_sold__fruits.sql", "deferred": false, "compiled_sql": "with dim_orders__dashboard as (\n\n    select * from \"postgres\".\"dbt\".\"dim_orders__dashboard\"\n\n)\n\n, renamed_summed as (\n\n    select\n        replace(replace(country, '''', ''), ' ', '_') as country\n      , sum(units_sold)                               as units_sold\n\n    from\n        dim_orders__dashboard\n\n    where\n         item_type = 'Fruits'\n\n    group by\n        country\n\n)\n\n, final as (\n\n    select\n         a.country                     as a_country\n       , b.country                     as b_country\n       , (b.units_sold - a.units_sold) as units_sold_diff\n       , current_timestamp   as dbt_created_at\n\n    from\n        renamed_summed     as a\n        cross join\n            renamed_summed as b\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with dim_orders__dashboard as (\n\n    select * from \"postgres\".\"dbt\".\"dim_orders__dashboard\"\n\n)\n\n, renamed_summed as (\n\n    select\n        replace(replace(country, '''', ''), ' ', '_') as country\n      , sum(units_sold)                               as units_sold\n\n    from\n        dim_orders__dashboard\n\n    where\n         item_type = 'Fruits'\n\n    group by\n        country\n\n)\n\n, final as (\n\n    select\n         a.country                     as a_country\n       , b.country                     as b_country\n       , (b.units_sold - a.units_sold) as units_sold_diff\n       , current_timestamp   as dbt_created_at\n\n    from\n        renamed_summed     as a\n        cross join\n            renamed_summed as b\n\n)\n\nselect * from final"}, "error": null, "status": null, "execution_time": 0.19720721244812012, "thread_id": "Thread-8", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.412952Z", "completed_at": "2020-10-31T15:55:31.565833Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.591106Z", "completed_at": "2020-10-31T15:55:31.591124Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set now = modules.datetime.datetime.now() %}\n{% set now_str = now.strftime('%Y%m%d_%H%M') %}\n\n{{\n    config(\n        materialized='table',\n        post_hook=[\n            \"{{ crazy_create_table_loop( this.schema , this.name ) }}\",\n        ],\n    )\n}}\n{# -- \"drop table if exists {{ this.schema }}.{{ this.name }}_fruit_only\", #}\n{# -- \"create table {{ this.schema }}.{{ this.name}}_fruit_only as (select * from {{ this }} where item_type = 'Fruits')\", #}\n\nwith dim_orders__dashboard as (\n\n    select * from {{ ref('dim_orders__dashboard') }}\n\n)\n\n, experiement_minute_x_profit as (\n\n    select\n          order_id\n        , item_type\n        , total_profit                      as ori_total_profit\n        , {{ now.minute }}                  as multiply_amount\n        , total_profit * {{ now.minute }}   as exp_total_profit\n\n    from\n        dim_orders__dashboard\n\n)\n\nselect * from experiement_minute_x_profit", "compiled": true, "database": "postgres", "schema": "dbt_experiments", "fqn": ["dbt_teach_in", "experiments", "tester"], "unique_id": "model.dbt_teach_in.tester", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "experiments/tester.sql", "original_file_path": "models/experiments/tester.sql", "name": "tester", "resource_type": "model", "alias": "tester", "checksum": {"name": "sha256", "checksum": "cbcc4f0ba03597acce870dbf0a6ada8887ffcef6cf652502e9c6f9d9d09548b9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ crazy_create_table_loop( this.schema , this.name ) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "experiments", "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["dim_orders__dashboard"], ["base_item_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt_teach_in.crazy_create_table_loop"], "nodes": ["model.dbt_teach_in.dim_orders__dashboard", "model.dbt_teach_in.base_item_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/experiments/tester.sql", "deferred": false, "compiled_sql": "\n\n\n\n\n\n\nwith dim_orders__dashboard as (\n\n    select * from \"postgres\".\"dbt\".\"dim_orders__dashboard\"\n\n)\n\n, experiement_minute_x_profit as (\n\n    select\n          order_id\n        , item_type\n        , total_profit                      as ori_total_profit\n        , 55                  as multiply_amount\n        , total_profit * 55   as exp_total_profit\n\n    from\n        dim_orders__dashboard\n\n)\n\nselect * from experiement_minute_x_profit", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\n\n\n\nwith dim_orders__dashboard as (\n\n    select * from \"postgres\".\"dbt\".\"dim_orders__dashboard\"\n\n)\n\n, experiement_minute_x_profit as (\n\n    select\n          order_id\n        , item_type\n        , total_profit                      as ori_total_profit\n        , 55                  as multiply_amount\n        , total_profit * 55   as exp_total_profit\n\n    from\n        dim_orders__dashboard\n\n)\n\nselect * from experiement_minute_x_profit"}, "error": null, "status": null, "execution_time": 0.19638991355895996, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.417386Z", "completed_at": "2020-10-31T15:55:31.592704Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.602771Z", "completed_at": "2020-10-31T15:55:31.602785Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "same_reveue", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "not_null_stg_orders__calc_check_same_reveue"], "unique_id": "test.dbt_teach_in.not_null_stg_orders__calc_check_same_reveue", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/not_null_stg_orders__calc_check_same_reveue.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "not_null_stg_orders__calc_check_same_reveue", "resource_type": "test", "alias": "not_null_stg_orders__calc_check_same_reveue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/not_null_stg_orders__calc_check_same_reveue.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_reveue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_reveue is null\n\n\n", "column_name": "same_reveue"}, "error": null, "status": null, "execution_time": 0.19323492050170898, "thread_id": "Thread-6", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.443119Z", "completed_at": "2020-10-31T15:55:31.595694Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.605184Z", "completed_at": "2020-10-31T15:55:31.605194Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "same_profit", "model": "{{ ref('stg_orders__calc_check') }}"}}, "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "schema_test", "not_null_stg_orders__calc_check_same_profit"], "unique_id": "test.dbt_teach_in.not_null_stg_orders__calc_check_same_profit", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "schema_test/not_null_stg_orders__calc_check_same_profit.sql", "original_file_path": "models/reporting/staging/reporting_staging.yml", "name": "not_null_stg_orders__calc_check_same_profit", "resource_type": "test", "alias": "not_null_stg_orders__calc_check_same_profit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/staging/reporting_staging.yml/schema_test/not_null_stg_orders__calc_check_same_profit.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"postgres\".\"dbt\".\"stg_orders__calc_check\"\nwhere same_profit is null\n\n\n", "column_name": "same_profit"}, "error": null, "status": null, "execution_time": 0.19426298141479492, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.442924Z", "completed_at": "2020-10-31T15:55:31.596957Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.605727Z", "completed_at": "2020-10-31T15:55:31.605738Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{% set this_bool = \"false\" -%}\n\nwith stg_orders__calc_check as (\n\n    select * from {{ ref('stg_orders__calc_check') }}\n\n)\n\nselect\n    order_id\n\nfrom\n    stg_orders__calc_check\n\nwhere\n    same_reveue is {{ this_bool }}\nor\n    same_cost is {{ this_bool }}\nor\n    same_profit is {{ this_bool }}", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "data_test", "test_stg_orders__calc_check"], "unique_id": "test.dbt_teach_in.test_stg_orders__calc_check", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "data_test/test_stg_orders__calc_check.sql", "original_file_path": "tests/test_stg_orders__calc_check.sql", "name": "test_stg_orders__calc_check", "resource_type": "test", "alias": "test_stg_orders__calc_check", "checksum": {"name": "sha256", "checksum": "37e673d14babfd7e259d1aeeb71ee02e6ba30bc0dc8e881c7b5aa7bc62fb0c88"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["data"], "refs": [["stg_orders__calc_check"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.dbt_teach_in.stg_orders__calc_check"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/tests/test_stg_orders__calc_check.sql", "deferred": false, "compiled_sql": "\nselect count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\nwith stg_orders__calc_check as (\n\n    select * from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n)\n\nselect\n    order_id\n\nfrom\n    stg_orders__calc_check\n\nwhere\n    same_reveue is false\nor\n    same_cost is false\nor\n    same_profit is false\n)"}], "injected_sql": "\nwith dbt__CTE__INTERNAL_test as (\nwith stg_orders__calc_check as (\n\n    select * from \"postgres\".\"dbt\".\"stg_orders__calc_check\"\n\n)\n\nselect\n    order_id\n\nfrom\n    stg_orders__calc_check\n\nwhere\n    same_reveue is false\nor\n    same_cost is false\nor\n    same_profit is false\n)select count(*) from dbt__CTE__INTERNAL_test"}, "error": null, "status": null, "execution_time": 0.08246302604675293, "thread_id": "Thread-7", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.612792Z", "completed_at": "2020-10-31T15:55:31.692537Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.692985Z", "completed_at": "2020-10-31T15:55:31.692997Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n    config({\n        \"materialized\" : \"table\",\n        \"pre-hook\": [\n            \"create extension if not exists tablefunc \",\n        ],\n        \"tags\": [\n            \"distances\",\n        ],\n    })\n}}\n\n\n{% set stg_ref = 'stg_orders__countries_units_sold__fruits' -%}\n{% set stg_item_type = 'Fruits' -%}\n{% set a_name = 'a_country' -%}\n{% set b_name = 'b_country' -%}\n\nwith final as (\n\n    select\n        a_name,\n        {{ get_b_name_columns(stg_ref, b_name) }}\n    from\n        crosstab(\n            'select\n                {{ a_name }} ,\n                {{ b_name }} ,\n                units_sold_diff\n             from \"{{ target.database }}\".\"{{ target.schema }}\".\"{{ stg_ref }}\"\n            ',\n            $$VALUES {{ get_b_name_value(stg_ref, b_name) }} $$\n        ) as ct (\n            a_name text, {{ get_b_name_type(stg_ref, b_name, 'int8') }}\n        )\n    order by 1 asc\n)\n\nselect * from final", "compiled": true, "database": "postgres", "schema": "dbt", "fqn": ["dbt_teach_in", "reporting", "core", "fct_orders__countries_units_sold__fruits"], "unique_id": "model.dbt_teach_in.fct_orders__countries_units_sold__fruits", "package_name": "dbt_teach_in", "root_path": "/Users/blee/github-personal-1/dbt-teach-in/dbt_teach_in", "path": "reporting/core/fct_orders__countries_units_sold__fruits.sql", "original_file_path": "models/reporting/core/fct_orders__countries_units_sold__fruits.sql", "name": "fct_orders__countries_units_sold__fruits", "resource_type": "model", "alias": "fct_orders__countries_units_sold__fruits", "checksum": {"name": "sha256", "checksum": "ca1674c42e85bfc7f51e133d42f17b3df7dbc698f25f35b76797fb33efd3d1ac"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "create extension if not exists tablefunc ", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["reporting", "core", "distances"], "full_refresh": null, "bind": false}, "tags": ["reporting", "core", "distances"], "refs": [["stg_orders__countries_units_sold__fruits"], ["stg_orders__countries_units_sold__fruits"], ["stg_orders__countries_units_sold__fruits"]], "sources": [], "depends_on": {"macros": ["macro.dbt_teach_in.get_b_name_columns", "macro.dbt_teach_in.get_b_name_value", "macro.dbt_teach_in.get_b_name_type"], "nodes": ["model.dbt_teach_in.stg_orders__countries_units_sold__fruits", "model.dbt_teach_in.stg_orders__countries_units_sold__fruits", "model.dbt_teach_in.stg_orders__countries_units_sold__fruits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/dbt_teach_in/models/reporting/core/fct_orders__countries_units_sold__fruits.sql", "deferred": false, "compiled_sql": "\n\n\nwith final as (\n\n    select\n        a_name,\n        \n        coalesce( \"Afghanistan\" , 0) as \"Afghanistan\",\n        coalesce( \"Algeria\" , 0) as \"Algeria\",\n        coalesce( \"Andorra\" , 0) as \"Andorra\",\n        coalesce( \"Angola\" , 0) as \"Angola\",\n        coalesce( \"Antigua_and_Barbuda\" , 0) as \"Antigua_and_Barbuda\",\n        coalesce( \"Armenia\" , 0) as \"Armenia\",\n        coalesce( \"Australia\" , 0) as \"Australia\",\n        coalesce( \"Austria\" , 0) as \"Austria\",\n        coalesce( \"Azerbaijan\" , 0) as \"Azerbaijan\",\n        coalesce( \"Bahrain\" , 0) as \"Bahrain\",\n        coalesce( \"Bangladesh\" , 0) as \"Bangladesh\",\n        coalesce( \"Barbados\" , 0) as \"Barbados\",\n        coalesce( \"Belarus\" , 0) as \"Belarus\",\n        coalesce( \"Belgium\" , 0) as \"Belgium\",\n        coalesce( \"Belize\" , 0) as \"Belize\",\n        coalesce( \"Benin\" , 0) as \"Benin\",\n        coalesce( \"Bhutan\" , 0) as \"Bhutan\",\n        coalesce( \"Bosnia_and_Herzegovina\" , 0) as \"Bosnia_and_Herzegovina\",\n        coalesce( \"Botswana\" , 0) as \"Botswana\",\n        coalesce( \"Brunei\" , 0) as \"Brunei\",\n        coalesce( \"Bulgaria\" , 0) as \"Bulgaria\",\n        coalesce( \"Burkina_Faso\" , 0) as \"Burkina_Faso\",\n        coalesce( \"Burundi\" , 0) as \"Burundi\",\n        coalesce( \"Cambodia\" , 0) as \"Cambodia\",\n        coalesce( \"Cameroon\" , 0) as \"Cameroon\",\n        coalesce( \"Canada\" , 0) as \"Canada\",\n        coalesce( \"Cape_Verde\" , 0) as \"Cape_Verde\",\n        coalesce( \"Central_African_Republic\" , 0) as \"Central_African_Republic\",\n        coalesce( \"Chad\" , 0) as \"Chad\",\n        coalesce( \"China\" , 0) as \"China\",\n        coalesce( \"Comoros\" , 0) as \"Comoros\",\n        coalesce( \"Costa_Rica\" , 0) as \"Costa_Rica\",\n        coalesce( \"Cote_dIvoire\" , 0) as \"Cote_dIvoire\",\n        coalesce( \"Cuba\" , 0) as \"Cuba\",\n        coalesce( \"Cyprus\" , 0) as \"Cyprus\",\n        coalesce( \"Czech_Republic\" , 0) as \"Czech_Republic\",\n        coalesce( \"Democratic_Republic_of_the_Congo\" , 0) as \"Democratic_Republic_of_the_Congo\",\n        coalesce( \"Denmark\" , 0) as \"Denmark\",\n        coalesce( \"Djibouti\" , 0) as \"Djibouti\",\n        coalesce( \"Dominica\" , 0) as \"Dominica\",\n        coalesce( \"Dominican_Republic\" , 0) as \"Dominican_Republic\",\n        coalesce( \"East_Timor\" , 0) as \"East_Timor\",\n        coalesce( \"Egypt\" , 0) as \"Egypt\",\n        coalesce( \"El_Salvador\" , 0) as \"El_Salvador\",\n        coalesce( \"Equatorial_Guinea\" , 0) as \"Equatorial_Guinea\",\n        coalesce( \"Eritrea\" , 0) as \"Eritrea\",\n        coalesce( \"Estonia\" , 0) as \"Estonia\",\n        coalesce( \"Ethiopia\" , 0) as \"Ethiopia\",\n        coalesce( \"Federated_States_of_Micronesia\" , 0) as \"Federated_States_of_Micronesia\",\n        coalesce( \"Fiji\" , 0) as \"Fiji\",\n        coalesce( \"Finland\" , 0) as \"Finland\",\n        coalesce( \"France\" , 0) as \"France\",\n        coalesce( \"Gabon\" , 0) as \"Gabon\",\n        coalesce( \"Georgia\" , 0) as \"Georgia\",\n        coalesce( \"Ghana\" , 0) as \"Ghana\",\n        coalesce( \"Greece\" , 0) as \"Greece\",\n        coalesce( \"Greenland\" , 0) as \"Greenland\",\n        coalesce( \"Grenada\" , 0) as \"Grenada\",\n        coalesce( \"Guatemala\" , 0) as \"Guatemala\",\n        coalesce( \"Guinea\" , 0) as \"Guinea\",\n        coalesce( \"Guinea-Bissau\" , 0) as \"Guinea-Bissau\",\n        coalesce( \"Haiti\" , 0) as \"Haiti\",\n        coalesce( \"Honduras\" , 0) as \"Honduras\",\n        coalesce( \"Hungary\" , 0) as \"Hungary\",\n        coalesce( \"Iceland\" , 0) as \"Iceland\",\n        coalesce( \"India\" , 0) as \"India\",\n        coalesce( \"Indonesia\" , 0) as \"Indonesia\",\n        coalesce( \"Iran\" , 0) as \"Iran\",\n        coalesce( \"Iraq\" , 0) as \"Iraq\",\n        coalesce( \"Ireland\" , 0) as \"Ireland\",\n        coalesce( \"Israel\" , 0) as \"Israel\",\n        coalesce( \"Italy\" , 0) as \"Italy\",\n        coalesce( \"Jamaica\" , 0) as \"Jamaica\",\n        coalesce( \"Japan\" , 0) as \"Japan\",\n        coalesce( \"Jordan\" , 0) as \"Jordan\",\n        coalesce( \"Kazakhstan\" , 0) as \"Kazakhstan\",\n        coalesce( \"Kenya\" , 0) as \"Kenya\",\n        coalesce( \"Kiribati\" , 0) as \"Kiribati\",\n        coalesce( \"Kosovo\" , 0) as \"Kosovo\",\n        coalesce( \"Kuwait\" , 0) as \"Kuwait\",\n        coalesce( \"Kyrgyzstan\" , 0) as \"Kyrgyzstan\",\n        coalesce( \"Laos\" , 0) as \"Laos\",\n        coalesce( \"Latvia\" , 0) as \"Latvia\",\n        coalesce( \"Lebanon\" , 0) as \"Lebanon\",\n        coalesce( \"Liberia\" , 0) as \"Liberia\",\n        coalesce( \"Libya\" , 0) as \"Libya\",\n        coalesce( \"Liechtenstein\" , 0) as \"Liechtenstein\",\n        coalesce( \"Lithuania\" , 0) as \"Lithuania\",\n        coalesce( \"Luxembourg\" , 0) as \"Luxembourg\",\n        coalesce( \"Macedonia\" , 0) as \"Macedonia\",\n        coalesce( \"Madagascar\" , 0) as \"Madagascar\",\n        coalesce( \"Malawi\" , 0) as \"Malawi\",\n        coalesce( \"Malaysia\" , 0) as \"Malaysia\",\n        coalesce( \"Maldives\" , 0) as \"Maldives\",\n        coalesce( \"Mali\" , 0) as \"Mali\",\n        coalesce( \"Malta\" , 0) as \"Malta\",\n        coalesce( \"Marshall_Islands\" , 0) as \"Marshall_Islands\",\n        coalesce( \"Mauritania\" , 0) as \"Mauritania\",\n        coalesce( \"Mauritius\" , 0) as \"Mauritius\",\n        coalesce( \"Mexico\" , 0) as \"Mexico\",\n        coalesce( \"Moldova\" , 0) as \"Moldova\",\n        coalesce( \"Mongolia\" , 0) as \"Mongolia\",\n        coalesce( \"Montenegro\" , 0) as \"Montenegro\",\n        coalesce( \"Morocco\" , 0) as \"Morocco\",\n        coalesce( \"Mozambique\" , 0) as \"Mozambique\",\n        coalesce( \"Myanmar\" , 0) as \"Myanmar\",\n        coalesce( \"Namibia\" , 0) as \"Namibia\",\n        coalesce( \"Nauru\" , 0) as \"Nauru\",\n        coalesce( \"Nepal\" , 0) as \"Nepal\",\n        coalesce( \"Netherlands\" , 0) as \"Netherlands\",\n        coalesce( \"Nicaragua\" , 0) as \"Nicaragua\",\n        coalesce( \"Niger\" , 0) as \"Niger\",\n        coalesce( \"North_Korea\" , 0) as \"North_Korea\",\n        coalesce( \"Norway\" , 0) as \"Norway\",\n        coalesce( \"Oman\" , 0) as \"Oman\",\n        coalesce( \"Pakistan\" , 0) as \"Pakistan\",\n        coalesce( \"Palau\" , 0) as \"Palau\",\n        coalesce( \"Panama\" , 0) as \"Panama\",\n        coalesce( \"Philippines\" , 0) as \"Philippines\",\n        coalesce( \"Qatar\" , 0) as \"Qatar\",\n        coalesce( \"Republic_of_the_Congo\" , 0) as \"Republic_of_the_Congo\",\n        coalesce( \"Romania\" , 0) as \"Romania\",\n        coalesce( \"Russia\" , 0) as \"Russia\",\n        coalesce( \"Rwanda\" , 0) as \"Rwanda\",\n        coalesce( \"Saint_Kitts_and_Nevis\" , 0) as \"Saint_Kitts_and_Nevis\",\n        coalesce( \"Saint_Lucia\" , 0) as \"Saint_Lucia\",\n        coalesce( \"Saint_Vincent_and_the_Grenadines\" , 0) as \"Saint_Vincent_and_the_Grenadines\",\n        coalesce( \"Samoa\" , 0) as \"Samoa\",\n        coalesce( \"San_Marino\" , 0) as \"San_Marino\",\n        coalesce( \"Sao_Tome_and_Principe\" , 0) as \"Sao_Tome_and_Principe\",\n        coalesce( \"Senegal\" , 0) as \"Senegal\",\n        coalesce( \"Serbia\" , 0) as \"Serbia\",\n        coalesce( \"Seychelles\" , 0) as \"Seychelles\",\n        coalesce( \"Singapore\" , 0) as \"Singapore\",\n        coalesce( \"Slovakia\" , 0) as \"Slovakia\",\n        coalesce( \"Slovenia\" , 0) as \"Slovenia\",\n        coalesce( \"Solomon_Islands\" , 0) as \"Solomon_Islands\",\n        coalesce( \"Somalia\" , 0) as \"Somalia\",\n        coalesce( \"South_Africa\" , 0) as \"South_Africa\",\n        coalesce( \"South_Korea\" , 0) as \"South_Korea\",\n        coalesce( \"South_Sudan\" , 0) as \"South_Sudan\",\n        coalesce( \"Spain\" , 0) as \"Spain\",\n        coalesce( \"Sri_Lanka\" , 0) as \"Sri_Lanka\",\n        coalesce( \"Sudan\" , 0) as \"Sudan\",\n        coalesce( \"Swaziland\" , 0) as \"Swaziland\",\n        coalesce( \"Sweden\" , 0) as \"Sweden\",\n        coalesce( \"Switzerland\" , 0) as \"Switzerland\",\n        coalesce( \"Syria\" , 0) as \"Syria\",\n        coalesce( \"Taiwan\" , 0) as \"Taiwan\",\n        coalesce( \"Tajikistan\" , 0) as \"Tajikistan\",\n        coalesce( \"Tanzania\" , 0) as \"Tanzania\",\n        coalesce( \"Thailand\" , 0) as \"Thailand\",\n        coalesce( \"The_Gambia\" , 0) as \"The_Gambia\",\n        coalesce( \"Togo\" , 0) as \"Togo\",\n        coalesce( \"Tonga\" , 0) as \"Tonga\",\n        coalesce( \"Trinidad_and_Tobago\" , 0) as \"Trinidad_and_Tobago\",\n        coalesce( \"Turkey\" , 0) as \"Turkey\",\n        coalesce( \"Turkmenistan\" , 0) as \"Turkmenistan\",\n        coalesce( \"Uganda\" , 0) as \"Uganda\",\n        coalesce( \"United_Arab_Emirates\" , 0) as \"United_Arab_Emirates\",\n        coalesce( \"United_Kingdom\" , 0) as \"United_Kingdom\",\n        coalesce( \"United_States_of_America\" , 0) as \"United_States_of_America\",\n        coalesce( \"Uzbekistan\" , 0) as \"Uzbekistan\",\n        coalesce( \"Vanuatu\" , 0) as \"Vanuatu\",\n        coalesce( \"Vatican_City\" , 0) as \"Vatican_City\",\n        coalesce( \"Vietnam\" , 0) as \"Vietnam\",\n        coalesce( \"Yemen\" , 0) as \"Yemen\",\n        coalesce( \"Zimbabwe\" , 0) as \"Zimbabwe\"\n    from\n        crosstab(\n            'select\n                a_country ,\n                b_country ,\n                units_sold_diff\n             from \"postgres\".\"dbt\".\"stg_orders__countries_units_sold__fruits\"\n            ',\n            $$VALUES \n        ('Afghanistan'),\n        ('Algeria'),\n        ('Andorra'),\n        ('Angola'),\n        ('Antigua_and_Barbuda'),\n        ('Armenia'),\n        ('Australia'),\n        ('Austria'),\n        ('Azerbaijan'),\n        ('Bahrain'),\n        ('Bangladesh'),\n        ('Barbados'),\n        ('Belarus'),\n        ('Belgium'),\n        ('Belize'),\n        ('Benin'),\n        ('Bhutan'),\n        ('Bosnia_and_Herzegovina'),\n        ('Botswana'),\n        ('Brunei'),\n        ('Bulgaria'),\n        ('Burkina_Faso'),\n        ('Burundi'),\n        ('Cambodia'),\n        ('Cameroon'),\n        ('Canada'),\n        ('Cape_Verde'),\n        ('Central_African_Republic'),\n        ('Chad'),\n        ('China'),\n        ('Comoros'),\n        ('Costa_Rica'),\n        ('Cote_dIvoire'),\n        ('Cuba'),\n        ('Cyprus'),\n        ('Czech_Republic'),\n        ('Democratic_Republic_of_the_Congo'),\n        ('Denmark'),\n        ('Djibouti'),\n        ('Dominica'),\n        ('Dominican_Republic'),\n        ('East_Timor'),\n        ('Egypt'),\n        ('El_Salvador'),\n        ('Equatorial_Guinea'),\n        ('Eritrea'),\n        ('Estonia'),\n        ('Ethiopia'),\n        ('Federated_States_of_Micronesia'),\n        ('Fiji'),\n        ('Finland'),\n        ('France'),\n        ('Gabon'),\n        ('Georgia'),\n        ('Ghana'),\n        ('Greece'),\n        ('Greenland'),\n        ('Grenada'),\n        ('Guatemala'),\n        ('Guinea'),\n        ('Guinea-Bissau'),\n        ('Haiti'),\n        ('Honduras'),\n        ('Hungary'),\n        ('Iceland'),\n        ('India'),\n        ('Indonesia'),\n        ('Iran'),\n        ('Iraq'),\n        ('Ireland'),\n        ('Israel'),\n        ('Italy'),\n        ('Jamaica'),\n        ('Japan'),\n        ('Jordan'),\n        ('Kazakhstan'),\n        ('Kenya'),\n        ('Kiribati'),\n        ('Kosovo'),\n        ('Kuwait'),\n        ('Kyrgyzstan'),\n        ('Laos'),\n        ('Latvia'),\n        ('Lebanon'),\n        ('Liberia'),\n        ('Libya'),\n        ('Liechtenstein'),\n        ('Lithuania'),\n        ('Luxembourg'),\n        ('Macedonia'),\n        ('Madagascar'),\n        ('Malawi'),\n        ('Malaysia'),\n        ('Maldives'),\n        ('Mali'),\n        ('Malta'),\n        ('Marshall_Islands'),\n        ('Mauritania'),\n        ('Mauritius'),\n        ('Mexico'),\n        ('Moldova'),\n        ('Mongolia'),\n        ('Montenegro'),\n        ('Morocco'),\n        ('Mozambique'),\n        ('Myanmar'),\n        ('Namibia'),\n        ('Nauru'),\n        ('Nepal'),\n        ('Netherlands'),\n        ('Nicaragua'),\n        ('Niger'),\n        ('North_Korea'),\n        ('Norway'),\n        ('Oman'),\n        ('Pakistan'),\n        ('Palau'),\n        ('Panama'),\n        ('Philippines'),\n        ('Qatar'),\n        ('Republic_of_the_Congo'),\n        ('Romania'),\n        ('Russia'),\n        ('Rwanda'),\n        ('Saint_Kitts_and_Nevis'),\n        ('Saint_Lucia'),\n        ('Saint_Vincent_and_the_Grenadines'),\n        ('Samoa'),\n        ('San_Marino'),\n        ('Sao_Tome_and_Principe'),\n        ('Senegal'),\n        ('Serbia'),\n        ('Seychelles'),\n        ('Singapore'),\n        ('Slovakia'),\n        ('Slovenia'),\n        ('Solomon_Islands'),\n        ('Somalia'),\n        ('South_Africa'),\n        ('South_Korea'),\n        ('South_Sudan'),\n        ('Spain'),\n        ('Sri_Lanka'),\n        ('Sudan'),\n        ('Swaziland'),\n        ('Sweden'),\n        ('Switzerland'),\n        ('Syria'),\n        ('Taiwan'),\n        ('Tajikistan'),\n        ('Tanzania'),\n        ('Thailand'),\n        ('The_Gambia'),\n        ('Togo'),\n        ('Tonga'),\n        ('Trinidad_and_Tobago'),\n        ('Turkey'),\n        ('Turkmenistan'),\n        ('Uganda'),\n        ('United_Arab_Emirates'),\n        ('United_Kingdom'),\n        ('United_States_of_America'),\n        ('Uzbekistan'),\n        ('Vanuatu'),\n        ('Vatican_City'),\n        ('Vietnam'),\n        ('Yemen'),\n        ('Zimbabwe') $$\n        ) as ct (\n            a_name text, \n        \"Afghanistan\" int8,\n        \"Algeria\" int8,\n        \"Andorra\" int8,\n        \"Angola\" int8,\n        \"Antigua_and_Barbuda\" int8,\n        \"Armenia\" int8,\n        \"Australia\" int8,\n        \"Austria\" int8,\n        \"Azerbaijan\" int8,\n        \"Bahrain\" int8,\n        \"Bangladesh\" int8,\n        \"Barbados\" int8,\n        \"Belarus\" int8,\n        \"Belgium\" int8,\n        \"Belize\" int8,\n        \"Benin\" int8,\n        \"Bhutan\" int8,\n        \"Bosnia_and_Herzegovina\" int8,\n        \"Botswana\" int8,\n        \"Brunei\" int8,\n        \"Bulgaria\" int8,\n        \"Burkina_Faso\" int8,\n        \"Burundi\" int8,\n        \"Cambodia\" int8,\n        \"Cameroon\" int8,\n        \"Canada\" int8,\n        \"Cape_Verde\" int8,\n        \"Central_African_Republic\" int8,\n        \"Chad\" int8,\n        \"China\" int8,\n        \"Comoros\" int8,\n        \"Costa_Rica\" int8,\n        \"Cote_dIvoire\" int8,\n        \"Cuba\" int8,\n        \"Cyprus\" int8,\n        \"Czech_Republic\" int8,\n        \"Democratic_Republic_of_the_Congo\" int8,\n        \"Denmark\" int8,\n        \"Djibouti\" int8,\n        \"Dominica\" int8,\n        \"Dominican_Republic\" int8,\n        \"East_Timor\" int8,\n        \"Egypt\" int8,\n        \"El_Salvador\" int8,\n        \"Equatorial_Guinea\" int8,\n        \"Eritrea\" int8,\n        \"Estonia\" int8,\n        \"Ethiopia\" int8,\n        \"Federated_States_of_Micronesia\" int8,\n        \"Fiji\" int8,\n        \"Finland\" int8,\n        \"France\" int8,\n        \"Gabon\" int8,\n        \"Georgia\" int8,\n        \"Ghana\" int8,\n        \"Greece\" int8,\n        \"Greenland\" int8,\n        \"Grenada\" int8,\n        \"Guatemala\" int8,\n        \"Guinea\" int8,\n        \"Guinea-Bissau\" int8,\n        \"Haiti\" int8,\n        \"Honduras\" int8,\n        \"Hungary\" int8,\n        \"Iceland\" int8,\n        \"India\" int8,\n        \"Indonesia\" int8,\n        \"Iran\" int8,\n        \"Iraq\" int8,\n        \"Ireland\" int8,\n        \"Israel\" int8,\n        \"Italy\" int8,\n        \"Jamaica\" int8,\n        \"Japan\" int8,\n        \"Jordan\" int8,\n        \"Kazakhstan\" int8,\n        \"Kenya\" int8,\n        \"Kiribati\" int8,\n        \"Kosovo\" int8,\n        \"Kuwait\" int8,\n        \"Kyrgyzstan\" int8,\n        \"Laos\" int8,\n        \"Latvia\" int8,\n        \"Lebanon\" int8,\n        \"Liberia\" int8,\n        \"Libya\" int8,\n        \"Liechtenstein\" int8,\n        \"Lithuania\" int8,\n        \"Luxembourg\" int8,\n        \"Macedonia\" int8,\n        \"Madagascar\" int8,\n        \"Malawi\" int8,\n        \"Malaysia\" int8,\n        \"Maldives\" int8,\n        \"Mali\" int8,\n        \"Malta\" int8,\n        \"Marshall_Islands\" int8,\n        \"Mauritania\" int8,\n        \"Mauritius\" int8,\n        \"Mexico\" int8,\n        \"Moldova\" int8,\n        \"Mongolia\" int8,\n        \"Montenegro\" int8,\n        \"Morocco\" int8,\n        \"Mozambique\" int8,\n        \"Myanmar\" int8,\n        \"Namibia\" int8,\n        \"Nauru\" int8,\n        \"Nepal\" int8,\n        \"Netherlands\" int8,\n        \"Nicaragua\" int8,\n        \"Niger\" int8,\n        \"North_Korea\" int8,\n        \"Norway\" int8,\n        \"Oman\" int8,\n        \"Pakistan\" int8,\n        \"Palau\" int8,\n        \"Panama\" int8,\n        \"Philippines\" int8,\n        \"Qatar\" int8,\n        \"Republic_of_the_Congo\" int8,\n        \"Romania\" int8,\n        \"Russia\" int8,\n        \"Rwanda\" int8,\n        \"Saint_Kitts_and_Nevis\" int8,\n        \"Saint_Lucia\" int8,\n        \"Saint_Vincent_and_the_Grenadines\" int8,\n        \"Samoa\" int8,\n        \"San_Marino\" int8,\n        \"Sao_Tome_and_Principe\" int8,\n        \"Senegal\" int8,\n        \"Serbia\" int8,\n        \"Seychelles\" int8,\n        \"Singapore\" int8,\n        \"Slovakia\" int8,\n        \"Slovenia\" int8,\n        \"Solomon_Islands\" int8,\n        \"Somalia\" int8,\n        \"South_Africa\" int8,\n        \"South_Korea\" int8,\n        \"South_Sudan\" int8,\n        \"Spain\" int8,\n        \"Sri_Lanka\" int8,\n        \"Sudan\" int8,\n        \"Swaziland\" int8,\n        \"Sweden\" int8,\n        \"Switzerland\" int8,\n        \"Syria\" int8,\n        \"Taiwan\" int8,\n        \"Tajikistan\" int8,\n        \"Tanzania\" int8,\n        \"Thailand\" int8,\n        \"The_Gambia\" int8,\n        \"Togo\" int8,\n        \"Tonga\" int8,\n        \"Trinidad_and_Tobago\" int8,\n        \"Turkey\" int8,\n        \"Turkmenistan\" int8,\n        \"Uganda\" int8,\n        \"United_Arab_Emirates\" int8,\n        \"United_Kingdom\" int8,\n        \"United_States_of_America\" int8,\n        \"Uzbekistan\" int8,\n        \"Vanuatu\" int8,\n        \"Vatican_City\" int8,\n        \"Vietnam\" int8,\n        \"Yemen\" int8,\n        \"Zimbabwe\" int8\n        )\n    order by 1 asc\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nwith final as (\n\n    select\n        a_name,\n        \n        coalesce( \"Afghanistan\" , 0) as \"Afghanistan\",\n        coalesce( \"Algeria\" , 0) as \"Algeria\",\n        coalesce( \"Andorra\" , 0) as \"Andorra\",\n        coalesce( \"Angola\" , 0) as \"Angola\",\n        coalesce( \"Antigua_and_Barbuda\" , 0) as \"Antigua_and_Barbuda\",\n        coalesce( \"Armenia\" , 0) as \"Armenia\",\n        coalesce( \"Australia\" , 0) as \"Australia\",\n        coalesce( \"Austria\" , 0) as \"Austria\",\n        coalesce( \"Azerbaijan\" , 0) as \"Azerbaijan\",\n        coalesce( \"Bahrain\" , 0) as \"Bahrain\",\n        coalesce( \"Bangladesh\" , 0) as \"Bangladesh\",\n        coalesce( \"Barbados\" , 0) as \"Barbados\",\n        coalesce( \"Belarus\" , 0) as \"Belarus\",\n        coalesce( \"Belgium\" , 0) as \"Belgium\",\n        coalesce( \"Belize\" , 0) as \"Belize\",\n        coalesce( \"Benin\" , 0) as \"Benin\",\n        coalesce( \"Bhutan\" , 0) as \"Bhutan\",\n        coalesce( \"Bosnia_and_Herzegovina\" , 0) as \"Bosnia_and_Herzegovina\",\n        coalesce( \"Botswana\" , 0) as \"Botswana\",\n        coalesce( \"Brunei\" , 0) as \"Brunei\",\n        coalesce( \"Bulgaria\" , 0) as \"Bulgaria\",\n        coalesce( \"Burkina_Faso\" , 0) as \"Burkina_Faso\",\n        coalesce( \"Burundi\" , 0) as \"Burundi\",\n        coalesce( \"Cambodia\" , 0) as \"Cambodia\",\n        coalesce( \"Cameroon\" , 0) as \"Cameroon\",\n        coalesce( \"Canada\" , 0) as \"Canada\",\n        coalesce( \"Cape_Verde\" , 0) as \"Cape_Verde\",\n        coalesce( \"Central_African_Republic\" , 0) as \"Central_African_Republic\",\n        coalesce( \"Chad\" , 0) as \"Chad\",\n        coalesce( \"China\" , 0) as \"China\",\n        coalesce( \"Comoros\" , 0) as \"Comoros\",\n        coalesce( \"Costa_Rica\" , 0) as \"Costa_Rica\",\n        coalesce( \"Cote_dIvoire\" , 0) as \"Cote_dIvoire\",\n        coalesce( \"Cuba\" , 0) as \"Cuba\",\n        coalesce( \"Cyprus\" , 0) as \"Cyprus\",\n        coalesce( \"Czech_Republic\" , 0) as \"Czech_Republic\",\n        coalesce( \"Democratic_Republic_of_the_Congo\" , 0) as \"Democratic_Republic_of_the_Congo\",\n        coalesce( \"Denmark\" , 0) as \"Denmark\",\n        coalesce( \"Djibouti\" , 0) as \"Djibouti\",\n        coalesce( \"Dominica\" , 0) as \"Dominica\",\n        coalesce( \"Dominican_Republic\" , 0) as \"Dominican_Republic\",\n        coalesce( \"East_Timor\" , 0) as \"East_Timor\",\n        coalesce( \"Egypt\" , 0) as \"Egypt\",\n        coalesce( \"El_Salvador\" , 0) as \"El_Salvador\",\n        coalesce( \"Equatorial_Guinea\" , 0) as \"Equatorial_Guinea\",\n        coalesce( \"Eritrea\" , 0) as \"Eritrea\",\n        coalesce( \"Estonia\" , 0) as \"Estonia\",\n        coalesce( \"Ethiopia\" , 0) as \"Ethiopia\",\n        coalesce( \"Federated_States_of_Micronesia\" , 0) as \"Federated_States_of_Micronesia\",\n        coalesce( \"Fiji\" , 0) as \"Fiji\",\n        coalesce( \"Finland\" , 0) as \"Finland\",\n        coalesce( \"France\" , 0) as \"France\",\n        coalesce( \"Gabon\" , 0) as \"Gabon\",\n        coalesce( \"Georgia\" , 0) as \"Georgia\",\n        coalesce( \"Ghana\" , 0) as \"Ghana\",\n        coalesce( \"Greece\" , 0) as \"Greece\",\n        coalesce( \"Greenland\" , 0) as \"Greenland\",\n        coalesce( \"Grenada\" , 0) as \"Grenada\",\n        coalesce( \"Guatemala\" , 0) as \"Guatemala\",\n        coalesce( \"Guinea\" , 0) as \"Guinea\",\n        coalesce( \"Guinea-Bissau\" , 0) as \"Guinea-Bissau\",\n        coalesce( \"Haiti\" , 0) as \"Haiti\",\n        coalesce( \"Honduras\" , 0) as \"Honduras\",\n        coalesce( \"Hungary\" , 0) as \"Hungary\",\n        coalesce( \"Iceland\" , 0) as \"Iceland\",\n        coalesce( \"India\" , 0) as \"India\",\n        coalesce( \"Indonesia\" , 0) as \"Indonesia\",\n        coalesce( \"Iran\" , 0) as \"Iran\",\n        coalesce( \"Iraq\" , 0) as \"Iraq\",\n        coalesce( \"Ireland\" , 0) as \"Ireland\",\n        coalesce( \"Israel\" , 0) as \"Israel\",\n        coalesce( \"Italy\" , 0) as \"Italy\",\n        coalesce( \"Jamaica\" , 0) as \"Jamaica\",\n        coalesce( \"Japan\" , 0) as \"Japan\",\n        coalesce( \"Jordan\" , 0) as \"Jordan\",\n        coalesce( \"Kazakhstan\" , 0) as \"Kazakhstan\",\n        coalesce( \"Kenya\" , 0) as \"Kenya\",\n        coalesce( \"Kiribati\" , 0) as \"Kiribati\",\n        coalesce( \"Kosovo\" , 0) as \"Kosovo\",\n        coalesce( \"Kuwait\" , 0) as \"Kuwait\",\n        coalesce( \"Kyrgyzstan\" , 0) as \"Kyrgyzstan\",\n        coalesce( \"Laos\" , 0) as \"Laos\",\n        coalesce( \"Latvia\" , 0) as \"Latvia\",\n        coalesce( \"Lebanon\" , 0) as \"Lebanon\",\n        coalesce( \"Liberia\" , 0) as \"Liberia\",\n        coalesce( \"Libya\" , 0) as \"Libya\",\n        coalesce( \"Liechtenstein\" , 0) as \"Liechtenstein\",\n        coalesce( \"Lithuania\" , 0) as \"Lithuania\",\n        coalesce( \"Luxembourg\" , 0) as \"Luxembourg\",\n        coalesce( \"Macedonia\" , 0) as \"Macedonia\",\n        coalesce( \"Madagascar\" , 0) as \"Madagascar\",\n        coalesce( \"Malawi\" , 0) as \"Malawi\",\n        coalesce( \"Malaysia\" , 0) as \"Malaysia\",\n        coalesce( \"Maldives\" , 0) as \"Maldives\",\n        coalesce( \"Mali\" , 0) as \"Mali\",\n        coalesce( \"Malta\" , 0) as \"Malta\",\n        coalesce( \"Marshall_Islands\" , 0) as \"Marshall_Islands\",\n        coalesce( \"Mauritania\" , 0) as \"Mauritania\",\n        coalesce( \"Mauritius\" , 0) as \"Mauritius\",\n        coalesce( \"Mexico\" , 0) as \"Mexico\",\n        coalesce( \"Moldova\" , 0) as \"Moldova\",\n        coalesce( \"Mongolia\" , 0) as \"Mongolia\",\n        coalesce( \"Montenegro\" , 0) as \"Montenegro\",\n        coalesce( \"Morocco\" , 0) as \"Morocco\",\n        coalesce( \"Mozambique\" , 0) as \"Mozambique\",\n        coalesce( \"Myanmar\" , 0) as \"Myanmar\",\n        coalesce( \"Namibia\" , 0) as \"Namibia\",\n        coalesce( \"Nauru\" , 0) as \"Nauru\",\n        coalesce( \"Nepal\" , 0) as \"Nepal\",\n        coalesce( \"Netherlands\" , 0) as \"Netherlands\",\n        coalesce( \"Nicaragua\" , 0) as \"Nicaragua\",\n        coalesce( \"Niger\" , 0) as \"Niger\",\n        coalesce( \"North_Korea\" , 0) as \"North_Korea\",\n        coalesce( \"Norway\" , 0) as \"Norway\",\n        coalesce( \"Oman\" , 0) as \"Oman\",\n        coalesce( \"Pakistan\" , 0) as \"Pakistan\",\n        coalesce( \"Palau\" , 0) as \"Palau\",\n        coalesce( \"Panama\" , 0) as \"Panama\",\n        coalesce( \"Philippines\" , 0) as \"Philippines\",\n        coalesce( \"Qatar\" , 0) as \"Qatar\",\n        coalesce( \"Republic_of_the_Congo\" , 0) as \"Republic_of_the_Congo\",\n        coalesce( \"Romania\" , 0) as \"Romania\",\n        coalesce( \"Russia\" , 0) as \"Russia\",\n        coalesce( \"Rwanda\" , 0) as \"Rwanda\",\n        coalesce( \"Saint_Kitts_and_Nevis\" , 0) as \"Saint_Kitts_and_Nevis\",\n        coalesce( \"Saint_Lucia\" , 0) as \"Saint_Lucia\",\n        coalesce( \"Saint_Vincent_and_the_Grenadines\" , 0) as \"Saint_Vincent_and_the_Grenadines\",\n        coalesce( \"Samoa\" , 0) as \"Samoa\",\n        coalesce( \"San_Marino\" , 0) as \"San_Marino\",\n        coalesce( \"Sao_Tome_and_Principe\" , 0) as \"Sao_Tome_and_Principe\",\n        coalesce( \"Senegal\" , 0) as \"Senegal\",\n        coalesce( \"Serbia\" , 0) as \"Serbia\",\n        coalesce( \"Seychelles\" , 0) as \"Seychelles\",\n        coalesce( \"Singapore\" , 0) as \"Singapore\",\n        coalesce( \"Slovakia\" , 0) as \"Slovakia\",\n        coalesce( \"Slovenia\" , 0) as \"Slovenia\",\n        coalesce( \"Solomon_Islands\" , 0) as \"Solomon_Islands\",\n        coalesce( \"Somalia\" , 0) as \"Somalia\",\n        coalesce( \"South_Africa\" , 0) as \"South_Africa\",\n        coalesce( \"South_Korea\" , 0) as \"South_Korea\",\n        coalesce( \"South_Sudan\" , 0) as \"South_Sudan\",\n        coalesce( \"Spain\" , 0) as \"Spain\",\n        coalesce( \"Sri_Lanka\" , 0) as \"Sri_Lanka\",\n        coalesce( \"Sudan\" , 0) as \"Sudan\",\n        coalesce( \"Swaziland\" , 0) as \"Swaziland\",\n        coalesce( \"Sweden\" , 0) as \"Sweden\",\n        coalesce( \"Switzerland\" , 0) as \"Switzerland\",\n        coalesce( \"Syria\" , 0) as \"Syria\",\n        coalesce( \"Taiwan\" , 0) as \"Taiwan\",\n        coalesce( \"Tajikistan\" , 0) as \"Tajikistan\",\n        coalesce( \"Tanzania\" , 0) as \"Tanzania\",\n        coalesce( \"Thailand\" , 0) as \"Thailand\",\n        coalesce( \"The_Gambia\" , 0) as \"The_Gambia\",\n        coalesce( \"Togo\" , 0) as \"Togo\",\n        coalesce( \"Tonga\" , 0) as \"Tonga\",\n        coalesce( \"Trinidad_and_Tobago\" , 0) as \"Trinidad_and_Tobago\",\n        coalesce( \"Turkey\" , 0) as \"Turkey\",\n        coalesce( \"Turkmenistan\" , 0) as \"Turkmenistan\",\n        coalesce( \"Uganda\" , 0) as \"Uganda\",\n        coalesce( \"United_Arab_Emirates\" , 0) as \"United_Arab_Emirates\",\n        coalesce( \"United_Kingdom\" , 0) as \"United_Kingdom\",\n        coalesce( \"United_States_of_America\" , 0) as \"United_States_of_America\",\n        coalesce( \"Uzbekistan\" , 0) as \"Uzbekistan\",\n        coalesce( \"Vanuatu\" , 0) as \"Vanuatu\",\n        coalesce( \"Vatican_City\" , 0) as \"Vatican_City\",\n        coalesce( \"Vietnam\" , 0) as \"Vietnam\",\n        coalesce( \"Yemen\" , 0) as \"Yemen\",\n        coalesce( \"Zimbabwe\" , 0) as \"Zimbabwe\"\n    from\n        crosstab(\n            'select\n                a_country ,\n                b_country ,\n                units_sold_diff\n             from \"postgres\".\"dbt\".\"stg_orders__countries_units_sold__fruits\"\n            ',\n            $$VALUES \n        ('Afghanistan'),\n        ('Algeria'),\n        ('Andorra'),\n        ('Angola'),\n        ('Antigua_and_Barbuda'),\n        ('Armenia'),\n        ('Australia'),\n        ('Austria'),\n        ('Azerbaijan'),\n        ('Bahrain'),\n        ('Bangladesh'),\n        ('Barbados'),\n        ('Belarus'),\n        ('Belgium'),\n        ('Belize'),\n        ('Benin'),\n        ('Bhutan'),\n        ('Bosnia_and_Herzegovina'),\n        ('Botswana'),\n        ('Brunei'),\n        ('Bulgaria'),\n        ('Burkina_Faso'),\n        ('Burundi'),\n        ('Cambodia'),\n        ('Cameroon'),\n        ('Canada'),\n        ('Cape_Verde'),\n        ('Central_African_Republic'),\n        ('Chad'),\n        ('China'),\n        ('Comoros'),\n        ('Costa_Rica'),\n        ('Cote_dIvoire'),\n        ('Cuba'),\n        ('Cyprus'),\n        ('Czech_Republic'),\n        ('Democratic_Republic_of_the_Congo'),\n        ('Denmark'),\n        ('Djibouti'),\n        ('Dominica'),\n        ('Dominican_Republic'),\n        ('East_Timor'),\n        ('Egypt'),\n        ('El_Salvador'),\n        ('Equatorial_Guinea'),\n        ('Eritrea'),\n        ('Estonia'),\n        ('Ethiopia'),\n        ('Federated_States_of_Micronesia'),\n        ('Fiji'),\n        ('Finland'),\n        ('France'),\n        ('Gabon'),\n        ('Georgia'),\n        ('Ghana'),\n        ('Greece'),\n        ('Greenland'),\n        ('Grenada'),\n        ('Guatemala'),\n        ('Guinea'),\n        ('Guinea-Bissau'),\n        ('Haiti'),\n        ('Honduras'),\n        ('Hungary'),\n        ('Iceland'),\n        ('India'),\n        ('Indonesia'),\n        ('Iran'),\n        ('Iraq'),\n        ('Ireland'),\n        ('Israel'),\n        ('Italy'),\n        ('Jamaica'),\n        ('Japan'),\n        ('Jordan'),\n        ('Kazakhstan'),\n        ('Kenya'),\n        ('Kiribati'),\n        ('Kosovo'),\n        ('Kuwait'),\n        ('Kyrgyzstan'),\n        ('Laos'),\n        ('Latvia'),\n        ('Lebanon'),\n        ('Liberia'),\n        ('Libya'),\n        ('Liechtenstein'),\n        ('Lithuania'),\n        ('Luxembourg'),\n        ('Macedonia'),\n        ('Madagascar'),\n        ('Malawi'),\n        ('Malaysia'),\n        ('Maldives'),\n        ('Mali'),\n        ('Malta'),\n        ('Marshall_Islands'),\n        ('Mauritania'),\n        ('Mauritius'),\n        ('Mexico'),\n        ('Moldova'),\n        ('Mongolia'),\n        ('Montenegro'),\n        ('Morocco'),\n        ('Mozambique'),\n        ('Myanmar'),\n        ('Namibia'),\n        ('Nauru'),\n        ('Nepal'),\n        ('Netherlands'),\n        ('Nicaragua'),\n        ('Niger'),\n        ('North_Korea'),\n        ('Norway'),\n        ('Oman'),\n        ('Pakistan'),\n        ('Palau'),\n        ('Panama'),\n        ('Philippines'),\n        ('Qatar'),\n        ('Republic_of_the_Congo'),\n        ('Romania'),\n        ('Russia'),\n        ('Rwanda'),\n        ('Saint_Kitts_and_Nevis'),\n        ('Saint_Lucia'),\n        ('Saint_Vincent_and_the_Grenadines'),\n        ('Samoa'),\n        ('San_Marino'),\n        ('Sao_Tome_and_Principe'),\n        ('Senegal'),\n        ('Serbia'),\n        ('Seychelles'),\n        ('Singapore'),\n        ('Slovakia'),\n        ('Slovenia'),\n        ('Solomon_Islands'),\n        ('Somalia'),\n        ('South_Africa'),\n        ('South_Korea'),\n        ('South_Sudan'),\n        ('Spain'),\n        ('Sri_Lanka'),\n        ('Sudan'),\n        ('Swaziland'),\n        ('Sweden'),\n        ('Switzerland'),\n        ('Syria'),\n        ('Taiwan'),\n        ('Tajikistan'),\n        ('Tanzania'),\n        ('Thailand'),\n        ('The_Gambia'),\n        ('Togo'),\n        ('Tonga'),\n        ('Trinidad_and_Tobago'),\n        ('Turkey'),\n        ('Turkmenistan'),\n        ('Uganda'),\n        ('United_Arab_Emirates'),\n        ('United_Kingdom'),\n        ('United_States_of_America'),\n        ('Uzbekistan'),\n        ('Vanuatu'),\n        ('Vatican_City'),\n        ('Vietnam'),\n        ('Yemen'),\n        ('Zimbabwe') $$\n        ) as ct (\n            a_name text, \n        \"Afghanistan\" int8,\n        \"Algeria\" int8,\n        \"Andorra\" int8,\n        \"Angola\" int8,\n        \"Antigua_and_Barbuda\" int8,\n        \"Armenia\" int8,\n        \"Australia\" int8,\n        \"Austria\" int8,\n        \"Azerbaijan\" int8,\n        \"Bahrain\" int8,\n        \"Bangladesh\" int8,\n        \"Barbados\" int8,\n        \"Belarus\" int8,\n        \"Belgium\" int8,\n        \"Belize\" int8,\n        \"Benin\" int8,\n        \"Bhutan\" int8,\n        \"Bosnia_and_Herzegovina\" int8,\n        \"Botswana\" int8,\n        \"Brunei\" int8,\n        \"Bulgaria\" int8,\n        \"Burkina_Faso\" int8,\n        \"Burundi\" int8,\n        \"Cambodia\" int8,\n        \"Cameroon\" int8,\n        \"Canada\" int8,\n        \"Cape_Verde\" int8,\n        \"Central_African_Republic\" int8,\n        \"Chad\" int8,\n        \"China\" int8,\n        \"Comoros\" int8,\n        \"Costa_Rica\" int8,\n        \"Cote_dIvoire\" int8,\n        \"Cuba\" int8,\n        \"Cyprus\" int8,\n        \"Czech_Republic\" int8,\n        \"Democratic_Republic_of_the_Congo\" int8,\n        \"Denmark\" int8,\n        \"Djibouti\" int8,\n        \"Dominica\" int8,\n        \"Dominican_Republic\" int8,\n        \"East_Timor\" int8,\n        \"Egypt\" int8,\n        \"El_Salvador\" int8,\n        \"Equatorial_Guinea\" int8,\n        \"Eritrea\" int8,\n        \"Estonia\" int8,\n        \"Ethiopia\" int8,\n        \"Federated_States_of_Micronesia\" int8,\n        \"Fiji\" int8,\n        \"Finland\" int8,\n        \"France\" int8,\n        \"Gabon\" int8,\n        \"Georgia\" int8,\n        \"Ghana\" int8,\n        \"Greece\" int8,\n        \"Greenland\" int8,\n        \"Grenada\" int8,\n        \"Guatemala\" int8,\n        \"Guinea\" int8,\n        \"Guinea-Bissau\" int8,\n        \"Haiti\" int8,\n        \"Honduras\" int8,\n        \"Hungary\" int8,\n        \"Iceland\" int8,\n        \"India\" int8,\n        \"Indonesia\" int8,\n        \"Iran\" int8,\n        \"Iraq\" int8,\n        \"Ireland\" int8,\n        \"Israel\" int8,\n        \"Italy\" int8,\n        \"Jamaica\" int8,\n        \"Japan\" int8,\n        \"Jordan\" int8,\n        \"Kazakhstan\" int8,\n        \"Kenya\" int8,\n        \"Kiribati\" int8,\n        \"Kosovo\" int8,\n        \"Kuwait\" int8,\n        \"Kyrgyzstan\" int8,\n        \"Laos\" int8,\n        \"Latvia\" int8,\n        \"Lebanon\" int8,\n        \"Liberia\" int8,\n        \"Libya\" int8,\n        \"Liechtenstein\" int8,\n        \"Lithuania\" int8,\n        \"Luxembourg\" int8,\n        \"Macedonia\" int8,\n        \"Madagascar\" int8,\n        \"Malawi\" int8,\n        \"Malaysia\" int8,\n        \"Maldives\" int8,\n        \"Mali\" int8,\n        \"Malta\" int8,\n        \"Marshall_Islands\" int8,\n        \"Mauritania\" int8,\n        \"Mauritius\" int8,\n        \"Mexico\" int8,\n        \"Moldova\" int8,\n        \"Mongolia\" int8,\n        \"Montenegro\" int8,\n        \"Morocco\" int8,\n        \"Mozambique\" int8,\n        \"Myanmar\" int8,\n        \"Namibia\" int8,\n        \"Nauru\" int8,\n        \"Nepal\" int8,\n        \"Netherlands\" int8,\n        \"Nicaragua\" int8,\n        \"Niger\" int8,\n        \"North_Korea\" int8,\n        \"Norway\" int8,\n        \"Oman\" int8,\n        \"Pakistan\" int8,\n        \"Palau\" int8,\n        \"Panama\" int8,\n        \"Philippines\" int8,\n        \"Qatar\" int8,\n        \"Republic_of_the_Congo\" int8,\n        \"Romania\" int8,\n        \"Russia\" int8,\n        \"Rwanda\" int8,\n        \"Saint_Kitts_and_Nevis\" int8,\n        \"Saint_Lucia\" int8,\n        \"Saint_Vincent_and_the_Grenadines\" int8,\n        \"Samoa\" int8,\n        \"San_Marino\" int8,\n        \"Sao_Tome_and_Principe\" int8,\n        \"Senegal\" int8,\n        \"Serbia\" int8,\n        \"Seychelles\" int8,\n        \"Singapore\" int8,\n        \"Slovakia\" int8,\n        \"Slovenia\" int8,\n        \"Solomon_Islands\" int8,\n        \"Somalia\" int8,\n        \"South_Africa\" int8,\n        \"South_Korea\" int8,\n        \"South_Sudan\" int8,\n        \"Spain\" int8,\n        \"Sri_Lanka\" int8,\n        \"Sudan\" int8,\n        \"Swaziland\" int8,\n        \"Sweden\" int8,\n        \"Switzerland\" int8,\n        \"Syria\" int8,\n        \"Taiwan\" int8,\n        \"Tajikistan\" int8,\n        \"Tanzania\" int8,\n        \"Thailand\" int8,\n        \"The_Gambia\" int8,\n        \"Togo\" int8,\n        \"Tonga\" int8,\n        \"Trinidad_and_Tobago\" int8,\n        \"Turkey\" int8,\n        \"Turkmenistan\" int8,\n        \"Uganda\" int8,\n        \"United_Arab_Emirates\" int8,\n        \"United_Kingdom\" int8,\n        \"United_States_of_America\" int8,\n        \"Uzbekistan\" int8,\n        \"Vanuatu\" int8,\n        \"Vatican_City\" int8,\n        \"Vietnam\" int8,\n        \"Yemen\" int8,\n        \"Zimbabwe\" int8\n        )\n    order by 1 asc\n)\n\nselect * from final"}, "error": null, "status": null, "execution_time": 0.2744112014770508, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-31T15:55:31.628666Z", "completed_at": "2020-10-31T15:55:31.883114Z"}, {"name": "execute", "started_at": "2020-10-31T15:55:31.883867Z", "completed_at": "2020-10-31T15:55:31.883883Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-10-31T15:55:31.899598Z", "elapsed_time": 1.841404914855957}