
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_teach_in'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_teach_in'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: [
  "models",
  "../_source",
]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: [
  "macros",
  "../_macros",
]
snapshot-paths: ["snapshots"]
asset-paths: ["assets"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

vars:
  dbt_teach_in:
    colon: ";"


models:
  dbt_teach_in:
    materialized: view
    bind: false

    reporting:
  #    schema: reporting
      tags: ["reporting"]

      core:
        materialized: table
        tags: ["core"]

        intermediate:
          materialized: view
          tags: ["intermediate"]

      staging:
        tags: ["staging"]
        materialized: view

        base:
          materialized: ephemeral
          tags:
            - "base"
            - "cte"
            - "ephemeral"

    experiments:
      schema: experiments

sources:
  dbt_teach_in:
    dbt_seeds:
      +enable: false

seeds:
  dbt_teach_in:
    +schema: seeds
    +tags: ["seeds"]
    quote_columns: true

    orders:
      +enabled: true
      # Override column types
      +column_types:
        order_priority: varchar(1)


    snapshots:
      +schema: snapshots

      orders_snapshot_backup:
        +enabled: true
